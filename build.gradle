plugins {
    id 'base'
    
    // Project Lombok
 	id 'io.freefair.lombok' version '3.8.0'
}

repositories {
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:27.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0'
    
    // https://mvnrepository.com/artifact/cglib/cglib
	compile 'cglib:cglib:3.3.0'
    
    // https://mvnrepository.com/artifact/org.javassist/javassist
	compile 'org.javassist:javassist:3.26.0-GA'
}

buildScript {
	repositories {
		mavenCentral()
	}
	dependencies {
	 	// https://mvnrepository.com/artifact/io.swagger/swagger-codegen
	 	classpath 'io.swagger:swagger-codegen:2.4.0'
	}
}

group 'com.varsandnumbers.sandbox'

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

subprojects {

	group 'com.varsandnumbers.sandbox'
	version '0.0.1'

	repositories {
		mavenCentral()
	}
	
	plugins {
		id 'java'
		id 'maven'
	}
	
	compileJava.options.fork = true
	
	project.buildDir = '${rootProject.buildDir}/${project.name}'
	
	sourceSets {
        main {
            java {
                srcDir "${project.buildDir}/src/main/java"
            }
        }
    }

	task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
 
    artifacts {
        archives sourcesJar
    }
}

ext {
	appName      = 'sandbox-swagger'
	apiPackage   = '${group}.swagger.api'
	modelPackage = '${group}.swagger.model'
	swaggerFile  = '${rootProject.buildDir}/src/main/resources/library.yaml'
}


project('swagger-server') {

	// Dependencies for the generated sources
    dependencies {
    	compile "io.swagger:swagger-jersey2-jaxrs:1.6.0"
        compile 'io.springfox:springfox-swagger2:2.7.0'
    }
 
    // Actual task for generating the server
    task generateServer {
        doLast {
            def config = new CodegenConfigurator()
            config.setLang("jaxrs")
            config.setApiPackage(rootProject.apiPackage)            // Package to be used for the API interfaces
            config.setModelPackage(rootProject.modelPackage)        // Package to be used for the API models
            config.setInputSpec(rootProject.swaggerFile.toString()) // The swagger API file
            config.setOutputDir(project.buildDir.toString())        // The output directory, user-service-contract/build/user-service-server/
            config.setAdditionalProperties([
            		"library": "jersey2",
                    'dateLibrary'     : 'java8',
                    'useTags'         : 'true',
                    'interfaceOnly'   : 'true'   // Generating the Controller API interface and the models only
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate() // Executing the generation
        }
    }
 
    /* Defining the order of the tasks and the dependency between them.
       As this is a Java project, it will execute the generateServer task first,
       then the compilation of the generated files.
     */
    compileJava.dependsOn('generateServer')
}